{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aa08d0ae",
   "metadata": {},
   "source": [
    "# temperature conversiion program "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "44c1a3c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter temperature value: 47\n",
      "Enter original unit (C/F/K): F\n",
      "47.0°F = 8.33°C\n",
      "47.0°F = 281.48°K\n"
     ]
    }
   ],
   "source": [
    "from IPython.display import clear_output\n",
    "\n",
    "def temperature_conversion():\n",
    "    # Clear output\n",
    "    clear_output()\n",
    "    \n",
    "    # Prompt user for input\n",
    "    temperature_value = input(\"Enter temperature value: \")\n",
    "    original_unit = input(\"Enter original unit (C/F/K): \").upper()\n",
    "    \n",
    "    # Validate user input\n",
    "    try:\n",
    "        temperature_value = float(temperature_value)\n",
    "    except ValueError:\n",
    "        print(\"Invalid temperature value. Please enter a number.\")\n",
    "        return temperature_conversion()\n",
    "    \n",
    "    # Convert temperature\n",
    "    if original_unit == \"C\":\n",
    "        fahrenheit = temperature_value * 9/5 + 32\n",
    "        kelvin = temperature_value + 273.15\n",
    "        print(f\"{temperature_value}°C = {fahrenheit:.2f}°F\")\n",
    "        print(f\"{temperature_value}°C = {kelvin:.2f}°K\")\n",
    "    elif original_unit == \"F\":\n",
    "        celsius = (temperature_value - 32) * 5/9\n",
    "        kelvin = (temperature_value - 32) * 5/9 + 273.15\n",
    "        print(f\"{temperature_value}°F = {celsius:.2f}°C\")\n",
    "        print(f\"{temperature_value}°F = {kelvin:.2f}°K\")\n",
    "    elif original_unit == \"K\":\n",
    "        celsius = temperature_value - 273.15\n",
    "        fahrenheit = (temperature_value - 273.15) * 9/5 + 32\n",
    "        print(f\"{temperature_value}°K = {celsius:.2f}°C\")\n",
    "        print(f\"{temperature_value}°K = {fahrenheit:.2f}°F\")\n",
    "    else:\n",
    "        print(\"Invalid unit. Please enter C, F, or K.\")\n",
    "        return temperature_conversion()\n",
    "\n",
    "temperature_conversion()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c529e482",
   "metadata": {},
   "source": [
    "# create a guessing game"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6fe51d86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9dbb7c3c1c5247c1a6e69287a408b3ca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Text(value='', placeholder='Enter your guess')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c263b6eba0464342a8731673164a9430",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Label(value='')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ce84aa85b3a74b97b6b14a1b03c1bb5d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Label(value='Attempts: 0')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9dfb706d3c6340038fb72974a4702959",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Button(description='Guess', style=ButtonStyle())"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "import random\n",
    "import matplotlib as mp\n",
    "\n",
    "# Generate a random number between 1 and 100\n",
    "number_to_guess = random.randint(1, 100)\n",
    "\n",
    "# Initialize attempts\n",
    "attempts = 0\n",
    "\n",
    "# Create text box for user input\n",
    "text_box = widgets.Text(\n",
    "    value='',\n",
    "    placeholder='Enter your guess',\n",
    "    description='',\n",
    "    disabled=False\n",
    ")\n",
    "\n",
    "# Create label to display result\n",
    "result_label = widgets.Label(value='')\n",
    "\n",
    "# Create label to display attempts\n",
    "attempts_label = widgets.Label(value='Attempts: 0')\n",
    "\n",
    "# Create button to submit guess\n",
    "button = widgets.Button(description='Guess')\n",
    "\n",
    "# Display GUI components\n",
    "display(text_box)\n",
    "display(result_label)\n",
    "display(attempts_label)\n",
    "display(button)\n",
    "\n",
    "# Define function to handle button click\n",
    "def on_button_clicked(b):\n",
    "    global attempts\n",
    "    global number_to_guess\n",
    "    \n",
    "    # Get user's guess\n",
    "    user_guess = text_box.value\n",
    "    \n",
    "    # Validate user input\n",
    "    try:\n",
    "        user_guess = int(user_guess)\n",
    "    except ValueError:\n",
    "        result_label.value = \"Invalid input. Please enter a number.\"\n",
    "        return\n",
    "    \n",
    "    # Increment attempts\n",
    "    attempts += 1\n",
    "    attempts_label.value = f'Attempts: {attempts}'\n",
    "    \n",
    "    # Check if user guess is correct\n",
    "    if user_guess == number_to_guess:\n",
    "        result_label.value = f\"Congratulations! You've guessed the number in {attempts} attempts!\"\n",
    "        button.disabled = True  # Disable button after winning\n",
    "    elif user_guess < number_to_guess:\n",
    "        result_label.value = \"Too low! Try again.\"\n",
    "    else:\n",
    "        result_label.value = \"Too high! Try again.\"\n",
    "\n",
    "    # Clear text box\n",
    "    text_box.value = ''\n",
    "\n",
    "# Link button click to function\n",
    "button.on_click(on_button_clicked)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d18f7e57",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
